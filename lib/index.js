const acorn = require('acorn')
const estraverse = require('estraverse')
const genCode = require('escodegen')
const genId = require('./gen-id')
const visitor = require('./visitor')

const sourceMap = require('source-map')
const SourceMapConsumer = sourceMap.SourceMapConsumer

module.exports = function (contents, sourcemap) {

  const id = genId(this.resourcePath)
  let hasComponent = false;

  const parseOptions = { sourceType: 'module' }

  if (this.sourceMap) {
    parseOptions.locations = true
    parseOptions.sourceFile = this.resourcePath
  }

  const ast = acorn.parse(contents, parseOptions)
  const res = visitor(ast).visit();

  if (!res.hasComponent) {
    this.callback(null, contents, sourcemap)
    return
  }

  if (this.sourceMap) {
    const generatedContents = genCode.generate(res.code, {
      sourceMap: this.resourcePath,
      sourceMapWithCode: true,
      sourceContent: contents
    })

    // apply the original sourcemap to the sourcemap generated by escodegen.
    const sourceMapGenerator = generatedContents.map

    if (sourcemap) {
      const originalSmc = new SourceMapConsumer(sourcemap)
      sourceMapGenerator.applySourceMap(originalSmc)
    }

    const outSourcemap = sourceMapGenerator.toJSON()

    const outCode = contents + generatedContents.code + genHotReload(id, res.identifier);

    this.callback(null, outCode, outSourcemap)
  } else {

    const generatedContents = genCode.generate(res.code)

    var outCode = contents + generatedContents + genHotReload(id, res.identifier);

    this.callback(null, outCode)
  }
}

function genHotReload(id, identifier) {
  return `
if (module.hot) { (function(options) {
  if (typeof options === 'function') {
    options = ${identifier}.options
  }

  var api = require('vue-hot-reload-api')
  var Vue = require('vue')

  api.install(Vue)

  if (api.compatible) {
    module.hot.accept()
    
    if (!module.hot.data) {
      api.createRecord(${id}, options)
    } else {
      api.reload(${id}, options)
    }
  }})(${identifier})
}`
}
